#!/usr/bin/env python
"""Assemble features from separate directories and prepare files for use in the browser."""
import os
import json
import traceback
import re
try:
    from urllib.request import pathname2url
except ImportError:
    from urllib import pathname2url

allFeedChangesContent = set()

print('[   INFO] Building feed changes files...')

# Write the feedChanges file
pattern = re.compile(r"^[\s]*(ynabToolKit\..+?)[\s]*=[\s]*\([\s]*function[\s]*\([\s]*\)[\s]*\{.*$", re.MULTILINE)

for dirName, subdirList, fileList in os.walk('./source/common/res/features/'):
    if dirName.endswith('shared'):
        continue

    jsFiles = [f for f in fileList if f.endswith('.js')]

    for jsFile in jsFiles:

        with open(os.path.join(dirName, jsFile), 'r') as content_file:
            content = content_file.read()
            result = pattern.search(content)

            if result:
                allFeedChangesContent.add(result.group(1))

with open('./source/common/res/features/act-on-change/feedChanges.js', 'w') as feedChanges:
    feedChanges.write(('/*\n'
                       ' **********************************************************\n'
                       ' * Warning: This is a file generated by the build process. *\n'
                       ' *                                                         *\n'
                       ' * Any changes you make manually will be overwritten       *\n'
                       ' * the next time you run ./build or build.bat!             *\n'
                       ' ***********************************************************\n'
                       ' */\n\n'))

    feedChanges.write(('(function poll() {\n'
                       '  if (typeof ynabToolKit.shared !== \'undefined\') {\n'
                       '    ynabToolKit.shared.feedChanges = function (changes) {\n'
                       '      // Python script auto builds up this list of features\n'
                       '      // that will use the mutation observer from actOnChange()\n\n'
                       '      // If a feature doesn\'t need to use observe(), we\n'
                       '      // just let it fail silently\n'))

    for feedChangesBlock in allFeedChangesContent:
        feedChanges.write('\n      try {\n')
        feedChanges.write('        if (changes.changedNodes) ' + feedChangesBlock + '.observe(changes.changedNodes);\n')
        feedChanges.write('        if (changes.routeChanged) ' + feedChangesBlock + '.onRouteChanged(changes.routeChanged);\n')
        feedChanges.write('      } catch (err) { /* ignore */ }\n')

    feedChanges.write(('    };\n'
                       '  } else {\n'
                       '    setTimeout(poll, 100);\n'
                       '  }\n'
                       '}());\n'))
